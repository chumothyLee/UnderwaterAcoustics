// Generated by CoffeeScript 1.9.3
var chroma, colorPicker, contrastSearch, isObject, objectAssign;

chroma = require('chroma-js');

objectAssign = require('object-assign');

contrastSearch = require('./contrastSearch');

isObject = require('is-object');

module.exports = colorPicker = function(color, targetColor, options) {
  var bg, contrastToEnd, contrastToStart, end, endColor, fg, highestPossibleContrast, newEnd, newStart, secondColor, start, startColor;
  if (options == null) {
    options = {};
  }
  if (targetColor == null) {
    targetColor = color;
  }
  if (isObject(targetColor)) {
    options = targetColor;
    targetColor = color;
  }
  options = objectAssign({
    colorIsBackground: true,
    contrast: 5,
    foregroundMax: 0.98,
    foregroundMin: 0.02,
    backgroundMax: 0.85,
    backgroundMin: 0.15,
    direction: void 0
  }, options);
  if (options.colorIsBackground) {
    start = options.foregroundMin;
    end = options.foregroundMax;
  } else {
    start = options.backgroundMin;
    end = options.backgroundMax;
  }
  if (options.direction != null) {
    secondColor = contrastSearch(targetColor, color, start, end, options.direction, options.contrast);
  } else {
    endColor = chroma(targetColor, 'lab').luminance(end);
    startColor = chroma(targetColor, 'lab').luminance(start);
    contrastToStart = chroma.contrast(color, startColor.css());
    contrastToEnd = chroma.contrast(color, endColor.css());
    if (contrastToEnd > options.contrast) {
      secondColor = contrastSearch(targetColor, color, start, end, 'end', options.contrast);
    } else if (contrastToStart > options.contrast) {
      secondColor = contrastSearch(targetColor, color, start, end, 'start', options.contrast);
    } else {
      if (options.colorIsBackground) {
        newStart = options.backgroundMin;
        newEnd = options.backgroundMax;
      } else {
        newStart = options.foregroundMin;
        newEnd = options.foregroundMax;
      }
      if (contrastToEnd > contrastToStart) {
        secondColor = chroma(targetColor, 'lab').luminance(end);
        highestPossibleContrast = chroma.contrast(secondColor.css(), chroma(color, 'lab').luminance(newStart));
        if (highestPossibleContrast > options.contrast) {
          color = contrastSearch(color, secondColor.css(), newStart, newEnd, 'start', options.contrast);
        } else {
          color = chroma(color, 'lab').luminance(newStart).lab();
        }
        secondColor = secondColor.lab();
      } else {
        secondColor = chroma(color, 'lab').luminance(start);
        highestPossibleContrast = chroma.contrast(secondColor.css(), chroma(color, 'lab').luminance(newEnd));
        if (highestPossibleContrast > options.contrast) {
          color = contrastSearch(color, secondColor.css(), newStart, newEnd, 'end', options.contrast);
        } else {
          color = chroma(color, 'lab').luminance(newEnd).lab();
        }
        secondColor = secondColor.lab();
      }
    }
  }
  if (options.colorIsBackground) {
    bg = color;
    fg = secondColor;
  } else {
    bg = secondColor;
    fg = color;
  }
  return {
    bg: chroma.lab(bg).css(),
    fg: chroma.lab(fg).css()
  };
};
